{"version":3,"sources":["constants.js","reducers.js","components/card.jsx","components/cardList.jsx","components/searchBox.jsx","components/scroll.jsx","components/errorBoundary.jsx","contaners/app.jsx","actions.js","serviceWorkerRegistration.js","index.js"],"names":["CHANGE_SEARCH_FIELD","initalState","searchField","Card","id","name","email","className","src","alt","CardList","robots","map","user","SearchBox","props","type","placeholder","onChange","searchChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","error","info","this","setState","hasError","Component","connect","dispatch","onSearchChange","event","text","target","value","payload","useState","setRobot","useEffect","fetch","then","response","json","users","filterRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.11e9dfbd.chunk.js","sourcesContent":["\r\nexport const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";","import {CHANGE_SEARCH_FIELD} from \"./constants\";\r\n\r\n\r\nconst initalState = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobots = (state = initalState, action = {})=>{\r\n    switch (action.type) {\r\n\r\n        case CHANGE_SEARCH_FIELD:\r\n\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","function Card({id, name, email}) {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robot profiles\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import Card from './card';\r\n\r\nfunction CardList({robots}){\r\n    \r\n    return(\r\n        robots.map((user)=>{\r\n            return <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\r\n        })\r\n        \r\n    );\r\n}\r\n\r\nexport default CardList;","function SearchBox(props){\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\r\n             type=\"search\" name=\"searchBox\" placeholder=\"search robots\"  onChange={props.searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","function Scroll(props){\r\n    return (\r\n        <div style={{overflow: \"scroll\", border: \"5px solid black\", height: \"800px\"}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\"hasError\": false};\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({\"hasError\": true});\r\n    }\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops sorry somthing went wrong...</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import CardList from '../components/cardList';\r\nimport SearchBox from '../components/searchBox';\r\nimport Scroll from '../components/scroll';\r\nimport { useState, useEffect } from 'react';\r\nimport ErrorBoundary from '../components/errorBoundary';\r\nimport { setSearchField } from '../actions';\r\nimport { connect } from 'react-redux';\r\n \r\nconst mapStateToProps = state=>{\r\n    return {\r\n        searchField: state.searchField\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n    }\r\n}\r\n    \r\n\r\nfunction App (props){\r\n    const { searchField, onSearchChange} = props;\r\n\r\n    const [robots, setRobot] = useState([]);\r\n    // const [searchfield, setSearchfield] = useState(\"\");\r\n   \r\n//     const onSearchChange = (event)=>{\r\n//         // this.setState({\"searchfield\": event.target.value}); Old way of react < 16.8\r\n//         setSearchfield(event.target.value);\r\n//    };\r\n\r\n   useEffect(() => {\r\n       fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response=>response.json())\r\n        .then(users=> setRobot(users));\r\n   }, []);\r\n\r\n   const filterRobots = robots.filter((robot)=>{\r\n       return robot.name.toLowerCase().includes(searchField);\r\n    });\r\n    \r\n    return (\r\n        <div className=\"tc\">\r\n            <h1 className=\"f-subheadline\">Roboto</h1>\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                    <CardList robots={filterRobots}/>\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD} from \"./constants\";\r\n\r\nexport const setSearchField = (text)=>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport { searchRobots } from \"./reducers\";\nimport App from './contaners/app';\n// import reportWebVitals from './reportWebVitals';\nimport { createLogger } from 'redux-logger';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst logger = createLogger();\nconst store = createStore(searchRobots, applyMiddleware(logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorkerRegistration.register();\n// reportWebVitals();\n"],"sourceRoot":""}